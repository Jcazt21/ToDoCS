version: 2.1

jobs:
  test:
    docker:
      - image: circleci/python:3.8
    steps:
      - checkout
      - run:
          name: Check presence of requirements.txt
          command: |
            if [ ! -f "requirements.txt" ]; then
              echo "ERROR: requirements.txt not found"
              exit 1
            elif [ ! -s "requirements.txt" ]; then
              echo "ERROR: requirements.txt is empty"
              exit 1
            fi
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update && sudo apt-get install -y \
            sqlite3 \
            curl \
            wget \
            git \
            unzip
            python -m pip install --upgrade pip
            pip install -r requirements.txt
      - run:
          name: Run tests
          command: python -m unittest tests.py

  lint:
    docker:
      - image: circleci/python:3.8
    steps:
      - checkout
      - run:
          name: Check presence of requirements.txt
          command: |
            if [ ! -f "requirements.txt" ]; then
              echo "ERROR: requirements.txt not found"
              exit 1
            elif [ ! -s "requirements.txt" ]; then
              echo "ERROR: requirements.txt is empty"
              exit 1
            fi
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update && sudo apt-get install -y \
            sqlite3 \
            curl \
            wget \
            git \
            unzip
            pip install flake8
      - run:
          name: Run linting
          command: flake8 .

  build:
    docker:
      - image: circleci/python:3.8
    steps:
      - checkout
      - run:
          name: Check presence of requirements.txt
          command: |
            if [ ! -f "requirements.txt" ]; then
              echo "ERROR: requirements.txt not found"
              exit 1
            elif [ ! -s "requirements.txt" ]; then
              echo "ERROR: requirements.txt is empty"
              exit 1
            fi
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update && sudo apt-get install -y \
            sqlite3 \
            curl \
            wget \
            git \
            unzip
            python -m pip install --upgrade pip
            pip install -r requirements.txt
      # Aquí puedes agregar los pasos adicionales para construir tu aplicación

  integration_tests:
    docker:
      - image: circleci/python:3.8
    steps:
      - checkout
      - run:
          name: Check presence of requirements.txt
          command: |
            if [ ! -f "requirements.txt" ]; then
              echo "ERROR: requirements.txt not found"
              exit 1
            elif [ ! -s "requirements.txt" ]; then
              echo "ERROR: requirements.txt is empty"
              exit 1
            fi
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update && sudo apt-get install -y \
            sqlite3 \
            curl \
            wget \
            git \
            unzip
            python -m pip install --upgrade pip
            pip install -r requirements.txt
      - run:
          name: Run integration tests
          command: python -m unittest integration_tests.py

  compatibility_tests:
    docker:
      - image: circleci/python:3.6
    steps:
      - checkout
      - run:
          name: Check presence of requirements.txt
          command: |
            if [ ! -f "requirements.txt" ]; then
              echo "ERROR: requirements.txt not found"
              exit 1
            elif [ ! -s "requirements.txt" ]; then
              echo "ERROR: requirements.txt is empty"
              exit 1
            fi
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update && sudo apt-get install -y \
            sqlite3 \
            curl \
            wget \
            git \
            unzip
            python -m pip install --upgrade pip
            pip install -r requirements.txt
      # Agrega aquí los pasos para las pruebas de compatibilidad con Python 3.6

  docker_image:
    docker:
      - image: circleci/python:3.8
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build Docker image
          command: |
            docker build -t myapp .
            docker images

workflows:
  version: 2
  CICD:
    jobs:
      - test
      - lint:
          requires:
            - test
      - build:
          requires:
            - lint
      - integration_tests:
          requires:
            - build
      - docker_image:
          requires:
            - integration_tests
      - compatibility_tests:
          requires:
            - integration_tests
